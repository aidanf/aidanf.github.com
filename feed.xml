<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>/aidanf/</title>
    <description>Aidan Finn&#39;s homepage. Musings on Swift, iOS, Ruby, Python, Clojure, Machine Learning etc
</description>
    <link>http://www.aidanf.net/</link>
    <atom:link href="http://www.aidanf.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 25 Apr 2016 23:09:01 +0100</pubDate>
    <lastBuildDate>Mon, 25 Apr 2016 23:09:01 +0100</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>An introduction to Swift for Ruby Developers</title>
        <description>&lt;p&gt;If you want to learn to develop apps for iOS and OS X there are a number of bottlenecks that you need to overcome.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Learn how to program.&lt;/li&gt;
  &lt;li&gt;Learn a language for developing on the Apple ecosystem, generally Swift or Objective-C.&lt;/li&gt;
  &lt;li&gt;Learn the development tools:  Xcode etc.&lt;/li&gt;
  &lt;li&gt;Learn the Cocoa APIs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you already know how to program in Ruby, then you’ve already overcome the first bottleneck.&lt;/p&gt;

&lt;p&gt;But if Ruby is your main programming language, then bottleneck number 2 has up to now been a significant hurdle.&lt;/p&gt;

&lt;p&gt;Thus in recent years there have been several tools that allow you to develop iOS applications without having to learn Objective-C (e.g. &lt;a href=&quot;http://www.appcelerator.com/product/&quot;&gt;Titanium&lt;/a&gt;, &lt;a href=&quot;http://phonegap.com/&quot;&gt;PhoneGap&lt;/a&gt;, &lt;a href=&quot;http://www.rubymotion.com/&quot;&gt;rubymotion&lt;/a&gt;, &lt;a href=&quot;http://xamarin.com/platform&quot;&gt;Xamarin&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For Rubyists who are accustomed to the benefits and comforts that come with programming in Ruby, Objective-C is not a particularly pleasant language to program in and the learning-curve can be quite steep. But that has changed significantly with the recent release of Swift.&lt;/p&gt;

&lt;p&gt;The jump from Ruby to Swift is much smaller than the jump from ruby to Objective-C. If you like Ruby, you’ll probably find that a lot to like about Swift.&lt;/p&gt;

&lt;p&gt;In this article I’ll outline a number of interesting features from Swift and compare them with the equivalent features in Ruby.&lt;/p&gt;

&lt;h1 id=&quot;some-basics&quot;&gt;Some basics&lt;/h1&gt;

&lt;h3 id=&quot;constants-and-variables&quot;&gt;Constants and variables&lt;/h3&gt;

&lt;p&gt;Everything in mungable in Ruby. Even constants are constant only by convention - you’ll get a warning if you try to change them but you can still go ahead and change them.&lt;/p&gt;

&lt;p&gt;Swift is much stricter (in general, this is a theme. Swift is generally more strict about things than Ruby.)&lt;/p&gt;

&lt;p&gt;In Ruby constants are conventionally defined using capital letters. If we really want to change a constant, we can. Ruby will generate a warning if we do this, but not an error.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/005b9ede917718d08bea.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We can create a new variable at any time simply by assigning it. And we can change the type of that variable at any time by assigning a new value. In this example, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is consecutively an &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt;, a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; all in the space of a few lines. This dynamism is a core part of Ruby’s philosophy - in Ruby anything can change at any time. This is what gives rise to a lot of Ruby’s meta-programming power. But it can also lead to some frustrating bugs and bad habits when comes to programming in the large.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/fdf3e290cf4f88c637ed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Swift takes a much stricter approach to constants and variables. In Swift all values are strictly typed. This has two implications that are a significant change to what you are accustomed to with Ruby.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You must declare the type of all of your variables and constants, or else assign them an initial value which Swift will use to infer their type.&lt;/li&gt;
  &lt;li&gt;You can’t change the type of a variable once you’ve declared it. It’s type is fixed and cannot be changed. For constants, their value is also fixed and can’t be changed once they’ve been initialised.&lt;/li&gt;
&lt;/ol&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/ec59e4765e1106d0804d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In Swift you declare a variable using the &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; keyword and constants using the &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;Constants are immutable. Once you’ve declared them, they cannot be changed again. Attempting to modify a constant in any way will result in an error.&lt;/p&gt;

&lt;h3 id=&quot;arrays&quot;&gt;Arrays&lt;/h3&gt;

&lt;p&gt;In Ruby, you can declare an array and add multiple different types to it.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/bb1d15a81da6fb538073.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Arrays is Swift are similar to arrays in Ruby with one notable difference. In Swift, arrays are typed. You declare the type of the array (or Swift infers it) and you can only add items that are of the same type to the array. You can’t generally store multiple different types in an array. There are ways to include objects of different types in an array (using protocols or inheritance), but for the most part you’ll stick to only having one type of thing in your array.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/e02bf7c721a32b982e4a.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;dictionaries&quot;&gt;Dictionaries&lt;/h3&gt;

&lt;p&gt;Similar to Arrays, Dictionaries in Swift are typed. You need to specify the type of both the keys and the values when you declare the dictionary. Once initialised, your dictionary can only contain key-value pairs that match that type signature.&lt;/p&gt;

&lt;p&gt;Also, similar to arrays, you can declare the type signature for the dictionary explicitly or Swift can infer it from the initial values.&lt;/p&gt;

&lt;p&gt;Apart from being typed, dictionaries in Swift are similar to dictionaries in Ruby. Here’s an example of declaring a dictionary and accessing it’s elements.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/ce52d0288ef693ff10a1.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;tuples&quot;&gt;Tuples&lt;/h3&gt;

&lt;p&gt;A tuple is an ordered list of elements. Tuples provide a way to group multiple values together. Many languages provide tuples as a native data type. Commonly there are two ways of accessing the data in a tuple: by position or by name. Swift provides tuples as a native data type along with the ability to access the tuples data both by name and by position.&lt;/p&gt;

&lt;p&gt;Ruby doesn’t formally have tuples, although you can approximate their behaviour using a couple of techniques.&lt;/p&gt;

&lt;p&gt;For example, you can use a convention where you treat a short list as a tuple. This is a common pattern in Ruby, where you return a short list of 2 or 3 elements from a method and these are decomposed into individual variables using the assignment operator.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/ddcb0819ee6e12c4d5fb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Or, if you want to be able to use dot notation to access elements in a tuple, you could use an object or struct.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/665f03dbb93a4fa00238.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So while Ruby doesn’t provide tuples as a native type, we can approximate much of the behaviour of tuples using Ruby arrays or structs.&lt;/p&gt;

&lt;p&gt;In Swift tuples are one of the native types. A tuple can consist of multiple different types. Tuples are ordered and elements of tuples can also be named. So we can access elements of a tuple both by position and name, and we can deconstruct data into a tuple using the assignment operator. Lets go through some examples of how we use tuples in swift.&lt;/p&gt;

&lt;p&gt;Tuples are defined using &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;. We can decompose a tuple into it’s parts using the assignment operator.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/98e179ce60e35804a9ba.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here we create a tuple consisting of 2 floats. We can assign the contents to &lt;code class=&quot;highlighter-rouge&quot;&gt;lat&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lon&lt;/code&gt; using assignment. If we don’t care about all of the contents of the tuple we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; to indicate fields that we don’t care about. In line 5 we just extract the value of the first element of the tuple into a constant - the &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; indicates that we don’t care about the second.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/bcaede19230a9ea2a644.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We can also access the elements of a tuple by position or by name. Here we define a tuple with named fields. We do this by providing the names as keys when we create the tuple (line 1). In this example we’ve named the first field &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;, and the second field &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;naming-things&quot;&gt;Naming things&lt;/h3&gt;

&lt;p&gt;One immediately noticeable difference is code style, especially with regard to how we name things. Ruby generally uses snake-case for methods and variables and camel-case for classes and capitalised names for constants.&lt;/p&gt;

&lt;p&gt;Swift programs use camel case for all these. Essentially:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CamelCase for everything&lt;/li&gt;
  &lt;li&gt;class names and top-level constants should be capitalized&lt;/li&gt;
  &lt;li&gt;method names, function names and variable names should start with a lower-case letter&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;truthiness&quot;&gt;Truthiness&lt;/h3&gt;

&lt;p&gt;In Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; are falsey and everything else is truthy. Thus you can use the presence of something as a logical condition. In Ruby we can use any type or expression in a boolean operator or an if condition.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/6cf01dd24bd5ebaaad69.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Swift is much stricter in it’s treatment of boolean values. Booleans in Swift are of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Bool&lt;/code&gt; and can be either &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. Anything in Swift that takes a boolean, must use a real boolean type. Any operator or function that expects a boolean must be given a boolean or the type system will complain.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/a1e393e81b95345569ea.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So we can’t do things like what’s shown below in Swift. In both cases we’ll get an error along the lines of “Type ‘String’ does not conform to protocol ‘BooleanType’”.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/bf5bc415cf0aa309c779.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Booleans in Swift are declared using the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;Bool&lt;/code&gt; or by initializing them with &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;running-code&quot;&gt;Running Code&lt;/h1&gt;

&lt;p&gt;One of the major differences between writing Ruby code and writing Swift code is the tooling involved.&lt;/p&gt;

&lt;p&gt;Although some Rubyists use an IDE such as RubyMine, most generally use a text editor such as Sublime, Emacs or Vi in combination with the command line and interactive console.&lt;/p&gt;

&lt;p&gt;For Swift development you’ll generally need to get to know Apple’s development tools. While it’s possible to setup your development workflow using other tools, I wouldn’t recommend it, especially if you are new to mac development.&lt;/p&gt;

&lt;p&gt;As a Ruby developer you’ll probably use interactive console a lot when doing development. The repl (e.g. irb, pry) provides a quick way of testing out code and inspecting how a piece of code behaves.&lt;/p&gt;

&lt;p&gt;Previously with Objective-C you’d have to compile and run a program to test out new code. The compile-run cycle was a pain for developers used to developing with an interactive repl.&lt;/p&gt;

&lt;p&gt;Luckily, the tools for interactive code development have improved significantly with the release of Swift. Xcode now has an interactive repl for running Swift code. It also has a new feature called &lt;a href=&quot;http://books.aidanf.net/learn-swift/running_code#sec-playgrounds&quot;&gt;playgrounds&lt;/a&gt; that allow you to try out and run code interactively.&lt;/p&gt;

&lt;h1 id=&quot;static-typing-and-type-inference&quot;&gt;Static typing and type inference&lt;/h1&gt;

&lt;p&gt;Swift is statically, strongly typed and uses type inference to determine the initial type of all your variables and constants.&lt;/p&gt;

&lt;p&gt;We’ve already touched on swift’s type system a couple of times - it’s one of the most immediately noticeable differences between ruby and swift. It such an important part of the language that it’s time to dive in deeper before we go any further.&lt;/p&gt;

&lt;h2 id=&quot;typing-in-ruby&quot;&gt;Typing in Ruby&lt;/h2&gt;

&lt;p&gt;First lets review typing in Ruby. Ruby is strongly, dynamically typed.&lt;/p&gt;

&lt;p&gt;Let’s break down those two dimensions. Being strongly typed means that an operation that expects a certain type is checked for that type before the operation is performed. With a weakly typed language, no such checking is done. Lets take a short detour to look at a weakly typed example to help us better understand strong typing.&lt;/p&gt;

&lt;p&gt;JavaScript is a weakly typed language. If we fire up our JavaScript console and try the following:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/6d79e07d9336dad3a987.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;we can see that JavaScript will happily take a string and an integer and use them as arguments to the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; function. In this example it coerces the integer to a string and appends it to the string.&lt;/p&gt;

&lt;p&gt;If we try the same in ruby we get an error since ruby is strongly typed.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/22f494712d011fa030b3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; method in ruby expects two arguments to be of the same type. The &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; method called on a string expects to be passed a string, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; method passed to a number expects to be passed a number. So in Ruby we need to be more specific about the behaviour we want here and do the correct type coercion ourselves.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/fac3a699f3e19e03be39.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Ruby is also dynamically typed. Dynamic typing means that the type of something can change through the course of a program, and the type is determined at the time at which it is used.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/548c005109e6e22bf2d8.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In this example, x starts out as a string, and we can pass it to &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; to concatenate it to another string. Then we can change it’s type to an Float, just by assigning a Float value to it. Now when we call &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; with x as an argument we get different behaviour because it’s now a number.&lt;/p&gt;

&lt;p&gt;In fact Ruby doesn’t really have a strong notion of types at all. Everything is an object and the “type” of an object is determined by it’s behaviour rather than the class of the object. This approach is often referred to as “duck typing”. If it looks like a duck and it quacks like a duck, then for all we care it’s a duck. &lt;em&gt;The type of something doesn’t matter - what matters is how it behaves&lt;/em&gt;. So you can usually pass any object as an argument to a method if it implements the behaviour that the method expects. In the following example we see an array of pets, where each pet is a different class, and each pet makes some kind of noise. We iterate through each object calling it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;make_noise&lt;/code&gt; method.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/5826caeb61b6c3f179e0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The output from running this program is&lt;/p&gt;

&lt;p&gt;``` ruby code/duck_typing.rb
Quack!&lt;/p&gt;

&lt;p&gt;Woof!
```&lt;/p&gt;

&lt;p&gt;In this example, Ruby doesn’t care about the type of each object, (i.e. which class it is), only that it responds to the &lt;code class=&quot;highlighter-rouge&quot;&gt;make_noise&lt;/code&gt; method. If it looks like something that can &lt;code class=&quot;highlighter-rouge&quot;&gt;make_noise&lt;/code&gt;, then that’s good enough. Ruby doesn’t do any type-checking other than checking that the object responds to the method that we’re trying to call on it.&lt;/p&gt;

&lt;p&gt;That’s a quick tour of typing in Ruby. If you’ve been mainly programming in Ruby for a while, then you’re probably not used to thinking about the types of your objects in any great detail, especially during the design phase of your program, since it’s easy to change them as you go along. Swift’s type system will be one of the most immediately noticeable and profound differences in philosophy between the two languages. Lets look at Swift’s type system.&lt;/p&gt;

&lt;h2 id=&quot;typing-and-type-inference-in-swift&quot;&gt;Typing and type inference in Swift&lt;/h2&gt;

&lt;p&gt;Swift is strongly, statically typed.&lt;/p&gt;

&lt;h3 id=&quot;statically-typed&quot;&gt;Statically typed&lt;/h3&gt;
&lt;p&gt;Being statically typed means that all your variables, constants, functions must have their types declared in advance. Then the compiler uses these type declarations to check that there are no type errors when it compiles the program. If there is a type error, your program won’t compile.&lt;/p&gt;

&lt;p&gt;Unlike Ruby, all your variables must have a declared type, and &lt;em&gt;once declared (or inferred) that type cannot change&lt;/em&gt;. Trying to change the type of something will result in an error.&lt;/p&gt;

&lt;p&gt;In this example, we declare an integer variable (Swift infers that it’s an integer from our initial assignment). Trying to assign a string value to our variable will cause swifts to raise a type error.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/77a65d7026db0178ba69.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;type-inference&quot;&gt;Type inference&lt;/h3&gt;

&lt;p&gt;As we’ve mentioned already Swift uses type inference to infer what types your various variables have. Alternatively you can  explicitly declare the type of your variables but in practice you often don’t need to. Swift will infer the type of a var if you assign it an initial value. So when you declare a variable, you need to either  give it an initial type, or explicitly declare it’s type. Here’s an example of how we can declare a type explicitly.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/5bb16f21595a3c6f6d0c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In line 1 we declare a string variable and give it in initial value. Because we gave it an initial value, we don’t need to explicitly declare the type of the variable - Swift infers that this is a string.&lt;/p&gt;

&lt;p&gt;In line 2 we see how to initialize a variable without giving it an initial value. In this case, because we didn’t give the variable an initial value, swift can’t infer it’s type, so we need to explicitly define it’s type as a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;. At line 3 then we can assign a string value to that variable. If we tried to assign a value of a different type we would get an error.&lt;/p&gt;

&lt;h3 id=&quot;strongly-typed&quot;&gt;Strongly typed&lt;/h3&gt;

&lt;p&gt;Like Ruby, Swift is strongly typed. Whenever you use a variable or pass something as a function argument, Swift checks that it is of the correct type. You can’t pass a String to a function that expects an Integer etc. Unlike ruby, swift does this check at compile time (since it’s statically typed) whereas ruby does this check at runtime (and then only at the point where the method being checked is called).&lt;/p&gt;

&lt;p&gt;Here’s an example where we declare a function. A function has a type signature and anytime you call the function, your function call must correspond to that type signature.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/1a0504347c1dc793ae7e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The type signature for this function indicates that it takes 2 arguments, both of which are integers and it returns an integer ( &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt; Int&lt;/code&gt; indicates the return type of the function)&lt;/p&gt;

&lt;p&gt;If we try to call this function with 2 integers as arguments (line 5) it returns an integer. But if we try to call it with arguments that aren’t 2 integers we’ll get an error (line 6).&lt;/p&gt;

&lt;h2 id=&quot;type-safety&quot;&gt;Type Safety&lt;/h2&gt;

&lt;p&gt;Ruby is not type-safe. In Ruby you can pass an object of any type to a function - Ruby will happily use that object if it implements the expected methods (duck-typing). If it doesn’t, then you’ll end up with a runtime error.&lt;/p&gt;

&lt;p&gt;Swift is a type-safe language. All variables have a declared type. All functions/methods have a type signature which declares the types of it’s arguments and the type of what it returns. The Swift compiler checks at compile time that all your types match up and your program won’t compile if they don’t.&lt;/p&gt;

&lt;p&gt;Swift uses the type signature of your functions and methods to make sure they are being called correctly (i.e. with the correct types). It also uses type signature for function dispatch. So you can define multiple versions of a function with different types signatures, and the one that gets called is the one where the arguments type signatures match. Here’s an example where we defining two functions with the same name, but different type signatures. If we call call the function with floats as arguments, the first one gets called, and if we call it with integer arguments, the second one gets called.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/81bff8ba5b3772990463.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;the-benefits-of-static-typing&quot;&gt;The benefits of static typing&lt;/h2&gt;

&lt;p&gt;One of the things I liked when I started programming in Python and Ruby was that I didn’t need to declare the type of everything. Just being able to assign and use a variable when I needed it felt freeing, and the lack of a compilation step really seemed to speed up development. Later I learned that you don’t really gain much in the long term. That initial boost in development speed gets eaten up later in the project, when you’re debugging runtime errors, writing extensive test suites etc.&lt;/p&gt;

&lt;p&gt;Having to declare your types and satisfy the compiler’s type system is not as onerous as it may appear. Since I started using languages with good, strong type systems, it’s become something that I miss when I’m programming in dynamic languages such as Ruby. A few points on the benefits/costs of static typing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In Ruby, you still need to be aware of the types of the objects (along with how they behave) that your are passing around your program. Often passing the wrong type of object to a method that expects something else will result in an error (which you won’t notice until your program is running). In fact by not explicitly declaring and designing your types, you increase the cognitive workload associated with keeping track of all the objects you’re passing around your program.&lt;/li&gt;
  &lt;li&gt;You don’t actually save that much. In the grander scheme of things, declaring the types of things in your program is a tiny portion of the overall amount of work involved in building a working program. And whatever time and typing you end up saving by not having to declare your types, you’ll end up using it to write unit tests and writing documentation for your function arguments anyway.&lt;/li&gt;
  &lt;li&gt;With static typing you end up with less meta-programming power. For some problems this means that you’ll end up with a solution that is more explicit and less “magicy”. Ruby has powerful meta-programming facilities which can facilitate elegant solutions for come kinds of problems (e.g implemening a DSL). For larger systems and long-term maintenance and readability the absense of magic can actually a benefit.&lt;/li&gt;
  &lt;li&gt;You may have been put off static-typing from experiences in other languages such as java or c++. They’re type systems suck, and get in your way as much as they help you.  However the type system in Swift is better. If you embrace it you’ll find it extremely useful in writing more correct programs.&lt;/li&gt;
  &lt;li&gt;You can often deduce what a function does from it’s type signature. This is very useful for making code more readable and understandable&lt;/li&gt;
  &lt;li&gt;Refactoring becomes easier, and you have a bunch of compiler errors to tell you where you broke things.&lt;/li&gt;
  &lt;li&gt;In Swift you don’t give up on the advantages of being able to develop without a compile step. The fact that you have a repl and playgrounds give you many of the benefits that come with dynamic languages by removing the historically slow and annoying step of having to constantly compile your code to see if works.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;duck-typing-generics-and-protocols&quot;&gt;Duck Typing, Generics and Protocols&lt;/h1&gt;

&lt;p&gt;We already discussed how Ruby implements duck typing, and how you can pass any type of objects to a function so long as they implement the expected behaviour.&lt;/p&gt;

&lt;p&gt;There are 2 concepts in Swift that support similar behaviour.&lt;/p&gt;

&lt;p&gt;Generics allow you to define code that works with multiple types. Protocols allow you to declare that something must implement particular functionality.&lt;/p&gt;

&lt;p&gt;Let’s consider a simple function that does nothing except return it’s argument.&lt;/p&gt;

&lt;p&gt;In Ruby we could write:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/d38e2957205e3206e2b5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Ruby will happily return the argument here without worrying about it’s type.&lt;/p&gt;

&lt;p&gt;Now in Swift, we have to define  the type signature of this function when we define it. And based on what we know so far, we would need to define a function that takes and integer as an argument, and another function that takes a string as an argument, and another function for whatever other types we want to support.&lt;/p&gt;

&lt;p&gt;That’s where generics come in. We can define this as a generic function, which indicates it can work with multiple types. Here’s how we define our generic doNothing function in swift.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/b6239b3fa393b516fc46.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Putting &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;T&amp;gt;&lt;/code&gt; here after the function name indicates that we are defining a generic function, with &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; as the placeholder for the type of whatever get’s passed as an argument. Specifically, the type signature for this function says that it’s a generic function that takes a single argument of type &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; and returns something of type &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We previously had an example of duck typing in ruby.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/bca6272743902f6b4a48.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;But in Swift an array must be typed - we have to specify the type of an array and then we can only put objects of that type into it.&lt;/p&gt;

&lt;p&gt;Protocols allow us to specify that something must implement specific behaviour. But Protocols are also first class types in Swift. So we can use a protocol as the type for an array, and then we can put any object that adopts that protocol into that array.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aidanf/71511b704c6fbdea9f3a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here we declare an array for holding our animals and give it a type of &lt;code class=&quot;highlighter-rouge&quot;&gt;Noisy&lt;/code&gt;. That array can store any object that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;Noisy&lt;/code&gt; protocol. This lets us implement duck typing in Swift, while still getting the benefits of Swift’s type system.&lt;/p&gt;

&lt;h1 id=&quot;in-summary&quot;&gt;In Summary&lt;/h1&gt;

&lt;p&gt;Swift is a very nice language and for anyone fluent in Ruby is should be relatively easy to learn. Like Ruby, functions and blocks are first-class objects and many of the patterns that are familiar to Ruby programmers translate directly to Swift. &lt;a href=&quot;http://books.aidanf.net/learn-swift/classes&quot;&gt;Classes in Swift&lt;/a&gt; are more or less the same as in Ruby. &lt;a href=&quot;http://books.aidanf.net/learn-swift/optionals&quot;&gt;Optionals in Swift&lt;/a&gt; are an interesting analog to how we often use &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; in Ruby.&lt;/p&gt;

&lt;p&gt;The major difference in Swift that is noticeable when coming from Ruby is the type system. Once you get used to that, the rest is plain sailing. Swift is easy enough to learn that you don’t lose anything by choosing to develop in Swift over choosing to use something like RubyMotion. The learning curve in learning Swift will be relatively gentle compared to the learning curve of the various Cocoa APIs.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 May 2015 00:00:00 +0100</pubDate>
        <link>http://www.aidanf.net/posts/an-introduction-to-swift-for-ruby-developers</link>
        <guid isPermaLink="true">http://www.aidanf.net/posts/an-introduction-to-swift-for-ruby-developers</guid>
        
        <category>swift,</category>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>A list of python software for deep learning</title>
        <description>&lt;p&gt;If you are doing deep-learning in python there are several packages to choose from.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://deeplearning.net/software/theano/&quot;&gt;Theano&lt;/a&gt; is a python library for defining and evaluatiing mathematical expressions with numerical arrays. It makes it easy to write deep learnign algorithms in python. You can implement deep learning algorithms directly using Theano or you can use one of several libraries that are built on top of Theano (see below). Here are &lt;a href=&quot;http://deeplearning.net/tutorial/&quot;&gt;several tutorials on how to implement various learning algorithms using Theano&lt;/a&gt;, including &lt;a href=&quot;http://deeplearning.net/tutorial/mlp.html#mlp&quot;&gt;perceptrons&lt;/a&gt; and &lt;a href=&quot;http://deeplearning.net/tutorial/lenet.html#lenet&quot;&gt;convnets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Theano is&amp;nbsp;also the basis for several other python deep learning libraries. Some of them abstract away the details of using Theano, so you don&#39;t need to understand how to use it (e.g. Kerras). Whereas others are more tightly integrated with&amp;nbsp;Theano&amp;nbsp;(e.g. Lasagne).&lt;/p&gt;
&lt;p&gt;The following &amp;nbsp;libraries all provide higher level abstractions for doing deep learning with Theano.&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://keras.io/&quot;&gt;Kerras&lt;/a&gt;&amp;nbsp;is &quot;a&amp;nbsp;minimalist, highly modular neural network library&quot;.&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Lasagne/Lasagne&quot;&gt;Lasagne&lt;/a&gt;&amp;nbsp;is &quot;a lightweight library to build and train neural networks in Theano&quot;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/bartvm/blocks&quot;&gt;Blocks&lt;/a&gt;&amp;nbsp;is &quot;a framework that helps you build neural network models on top of Theano&quot;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/lisa-lab/pylearn2&quot;&gt;Pylearn2&lt;/a&gt;&amp;nbsp;is a more general machine learning library that includes support for several deep learning algorithms.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Of course not every python option for deep learning is based on Theano. There are python interfaces to other non-python deep learning libraries.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/bashrc/libdeep-python&quot;&gt;libdeep-python&lt;/a&gt;&amp;nbsp;is a python wrapper around &lt;a href=&quot;https://github.com/bashrc/libdeep&quot;&gt;libdeep&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dmlc/cxxnet&quot;&gt;CXXNET&lt;/a&gt;&amp;nbsp;is a &quot;fast, concise, distributed deep learning framework&quot; which has a &lt;a href=&quot;https://github.com/dmlc/cxxnet/blob/master/doc/python.md&quot;&gt;python interface&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://caffe.berkeleyvision.org/&quot;&gt;Caffe&lt;/a&gt; is a deep learning framework with a python interface.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/NervanaSystems/neon&quot;&gt;Neon&lt;/a&gt; is a python based deep learning framework.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dnouri/nolearn&quot;&gt;nolearn&lt;/a&gt; has wrappers around a number of existing neural network libraries.&lt;/li&gt;&lt;/ul&gt;
</description>
        <pubDate>Tue, 12 May 2015 00:00:00 +0100</pubDate>
        <link>http://www.aidanf.net/posts/a-list-of-python-software-for-deep-learning</link>
        <guid isPermaLink="true">http://www.aidanf.net/posts/a-list-of-python-software-for-deep-learning</guid>
        
        
      </item>
    
      <item>
        <title>Seven of my favourite programming books</title>
        <description>&lt;p&gt;I’ve read a lot of programming books over the years. My favourite programming text books are generally short, clear, teach you something valuable and don&#39;t add unnecessary fluff.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Here is a short list of the books that I look back on most fondly.&lt;/p&gt;&lt;hr /&gt;&lt;h3&gt;The C Programming Language, Kernighan and Ritchie.&amp;nbsp;&lt;/h3&gt;

&lt;div class=&quot;product-block&quot; class=&quot;clear&quot;&gt;


    &lt;div class=&quot;image-container&quot;&gt;
        &lt;a href=&quot;http://www.amazon.com/C-Programming-Language-2nd-Edition-ebook/dp/B009ZUZ9FW%3FSubscriptionId%3D0ENGV10E9K9QDNSJ5C82%26tag%3Daida05-21%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB009ZUZ9FW&quot; target=&quot;new&quot;&gt;
            &lt;img src=&quot;http://ecx.images-amazon.com/images/I/51BKbn%2BUAGL.jpg&quot;/&gt;
        &lt;/a&gt;
    &lt;/div&gt;


    &lt;div class=&quot;productDetails left&quot;&gt;





    &lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;Up until I read this book, most programming books I had read were huge. There is a certain part of the tech publishing industry (and by extension the tech book buying public) that seem to judge the value of a book based on the number of pages it has.&lt;/p&gt;&lt;p&gt;Before I read this book I fell into the same mindset. I’d read books like “Teach yourself Game programming in 21 days” or “The C/C++ Bible” which were huge books. The more pages a book has, the more you can learn from it, right? This book taught me that insight and value are&amp;nbsp;not proportional to page count. In fact shorter books are often easier to process and better written.&lt;/p&gt;&lt;p&gt;Since then I’ve had a preference for shorter technical books. The shorter ones generally do a better job of choosing what points to include and explaining them succinctly, rather than including everything and then discussing with maximum verbosity.&lt;/p&gt;&lt;h3&gt;Theory of Programming Languages or something similar, ???.&lt;/h3&gt;&lt;p&gt;&lt;br /&gt;I can’t actually remember either the name or the author of this book - it was something like “Theory of Programming Languages” - but it’s probably the book that has been most influential on my programming career and sparked my interest in different programming languages.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;I never owned the book, but I picked it up in the library one evening while I was in college and ended up reading the entire thing over the next couple of days. And then I went back and read it again. It was eye opening.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;It was a book about programming languages and thinking about them more abstractly. It focused on 4 different classes of programming languages and went into detail about 1 language of each type - imperative (Pascal), object-oriented (C++), functional (Lisp) and logic-based (Prolog). This book taught me to think about programming languages more abstractly, in terms of what language features they support, how they implement them, and their general approach to computation.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;It decoupled the language’s syntax from it’s features and made it much easier for me to learn new programming languages.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;hr /&gt;&lt;h3 id=&quot;yui_3_17_2_3_1425904723179_20690&quot;&gt;The Little Schemer, &amp;nbsp;Daniel P. Friedman and Matthias Felleisen.&amp;nbsp;&lt;/h3&gt;

&lt;div class=&quot;product-block&quot; class=&quot;clear&quot;&gt;


    &lt;div class=&quot;image-container&quot;&gt;
        &lt;a href=&quot;http://www.amazon.com/The-Little-Schemer-4th-Edition/dp/0262560992%3FSubscriptionId%3D0ENGV10E9K9QDNSJ5C82%26tag%3Daida05-21%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0262560992&quot; target=&quot;new&quot;&gt;
            &lt;img src=&quot;http://ecx.images-amazon.com/images/I/41vFTwjzvbL.jpg&quot;/&gt;
        &lt;/a&gt;
    &lt;/div&gt;


    &lt;div class=&quot;productDetails left&quot;&gt;





    &lt;/div&gt;

&lt;/div&gt;

&lt;p id=&quot;yui_3_17_2_3_1425904723179_19938&quot;&gt;&lt;br&gt;This is a wonderful little book that through a series of short, repetitive, incremental examples teaches you to think about computation in a functional, recursive way. It’s framed as a series of questions and answers. I found it really engaging and it’s one of those books that changed how I think about programming.&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr /&gt;&lt;h3&gt;Python Essential&amp;nbsp;Reference (2nd edition), David M. Beazley.&amp;nbsp;&lt;/h3&gt;

&lt;div class=&quot;product-block&quot; class=&quot;clear&quot;&gt;


    &lt;div class=&quot;image-container&quot;&gt;
        &lt;a href=&quot;http://www.amazon.com/Python-Essential-Reference-4th-Edition/dp/0672329786%3FSubscriptionId%3D0ENGV10E9K9QDNSJ5C82%26tag%3Daida05-21%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0672329786&quot; target=&quot;new&quot;&gt;
            &lt;img src=&quot;http://ecx.images-amazon.com/images/I/41m7YwHS18L.jpg&quot;/&gt;
        &lt;/a&gt;
    &lt;/div&gt;


    &lt;div class=&quot;productDetails left&quot;&gt;





    &lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;Short and small, this book somehow managed&amp;nbsp;the trick of being a good tutorial while simultaneously being a good reference, all without turning into a tome (I had the second edition, later editions doubled the books size so I suspect later editions don&#39;t maintain the character of the 2nd edition). When I first started doing python development I kept this book close to hand all day, every day.&amp;nbsp;&lt;/p&gt;&lt;hr /&gt;&lt;h3&gt;Best of Ruby Quiz, James Edward Gray II.&lt;/h3&gt;

&lt;div class=&quot;product-block&quot; class=&quot;clear&quot;&gt;


    &lt;div class=&quot;image-container&quot;&gt;
        &lt;a href=&quot;http://www.amazon.com/Best-Ruby-Quiz-Pragmatic-Programmers/dp/0976694077%3FSubscriptionId%3D0ENGV10E9K9QDNSJ5C82%26tag%3Daida05-21%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0976694077&quot; target=&quot;new&quot;&gt;
            &lt;img src=&quot;http://ecx.images-amazon.com/images/I/512YltZdJTL.jpg&quot;/&gt;
        &lt;/a&gt;
    &lt;/div&gt;


    &lt;div class=&quot;productDetails left&quot;&gt;





    &lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;A book full of interesting little problems along with discussion of various solutions (derived from the &lt;a href=&quot;http://rubyquiz.com&quot;&gt;ruby quiz website&lt;/a&gt;. This example/solution format was really good way from me to improve my ruby code, and analysing the differing approaches to solving each problem was both instructive and fun.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;hr /&gt;&lt;h3&gt;Data Mining: Practical Maching Learning Tools and Techniques with Java Implementations, Ian Witten and Eibe Frank.&lt;/h3&gt;

&lt;div class=&quot;product-block&quot; class=&quot;clear&quot;&gt;


    &lt;div class=&quot;image-container&quot;&gt;
        &lt;a href=&quot;http://www.amazon.com/Data-Mining-Techniques-Implementations-Management/dp/1558605525%3FSubscriptionId%3D0ENGV10E9K9QDNSJ5C82%26tag%3Daida05-21%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1558605525&quot; target=&quot;new&quot;&gt;
            &lt;img src=&quot;http://ecx.images-amazon.com/images/I/51YafRZe8VL.jpg&quot;/&gt;
        &lt;/a&gt;
    &lt;/div&gt;


    &lt;div class=&quot;productDetails left&quot;&gt;





    &lt;/div&gt;

&lt;/div&gt;

&lt;p id=&quot;yui_3_17_2_3_1425904723179_34049&quot;&gt;&lt;br&gt;There are several good, practical books on Machine Learning around now. But back when I was doing my Phd there weren’t. There were plenty of books about Machine Learning but they were all very theoretical. You really had to decode a lot of theory and notation if you wanted to implement a ML algorithm. This was the first one that explained how the various algorithm worked through working code examples, and focused on the practical elements of using Machine Learning algorithms - stuff like feature selection, evaluation etc. I grokked ML a lot better after I read this book than I had from reading the various classic texts that take a more rigorous, theoretical approach.&lt;br&gt;&lt;/p&gt;&lt;hr /&gt;&lt;h3&gt;The Joy of Clojure, Michael Fogus and Chris Houser.&lt;/h3&gt;

&lt;div class=&quot;product-block&quot; class=&quot;clear&quot;&gt;


    &lt;div class=&quot;image-container&quot;&gt;
        &lt;a href=&quot;http://www.amazon.com/The-Joy-Clojure-Thinking-Way/dp/1935182641%3FSubscriptionId%3D0ENGV10E9K9QDNSJ5C82%26tag%3Daida05-21%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1935182641&quot; target=&quot;new&quot;&gt;
            &lt;img src=&quot;http://ecx.images-amazon.com/images/I/51LKOYzkfWL.jpg&quot;/&gt;
        &lt;/a&gt;
    &lt;/div&gt;


    &lt;div class=&quot;productDetails left&quot;&gt;





    &lt;/div&gt;

&lt;/div&gt;

&lt;p id=&quot;yui_3_17_2_3_1425904723179_37849&quot;&gt;This is the only recent book on the list. It focuses in idiomatic functional problem solving in clojure. It’s the only book I’ve read in recent years that’s had a really profound effect on how I think about programming. It’s not an easy read. When I first tried to read it I found myself lost before I finished the first chapter. So I went and read a couple of other clojure books first and then came back and tried it again. Once I’d read the other clojure books and written some substantial clojure programs I found this book a rewarding read.&amp;nbsp;&lt;br&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
        <link>http://www.aidanf.net/posts/favourite-programming-books</link>
        <guid isPermaLink="true">http://www.aidanf.net/posts/favourite-programming-books</guid>
        
        
      </item>
    
      <item>
        <title>Validating Emails in Rails (and other web frameworks)</title>
        <description>&lt;p&gt;Validating emails is an apparently easy task that turns out to actually be quite&amp;nbsp;difficult.&lt;/p&gt;&lt;p&gt;Early in your carreer as a rails developer you&#39;ll find yourself needing to validate email addresses on one of your models. Which is simple, right? It only takes one line.&lt;/p&gt;&lt;pre class=&quot;source-code&quot;&gt;validates :email, :format =&amp;gt; /EMAIL_REGEX_GOES_HERE/

&lt;/pre&gt;&lt;p&gt;Now all you need to do is come up with a regex that allows all valid emails and rejects all invalid emails. Should me simple, right?&lt;/p&gt;&lt;p&gt;The first time I needed to validate an email address, I spent way too much time working on a regular expression. Eventually I came up with one that covered all the cases I though were valid and rejected the invalid ones I tested with. Feeling happy with my sexy regex, I deployed it, moved onto something else and never gave it another thought.&lt;/p&gt;&lt;p&gt;Then a few weeks later, I got an email from the client saying that one of their users couldn&#39;t create an account on the system. Turns out that emails can have all sorts of funky variations, some of which are part of the defined standard, some of which are not.&lt;/p&gt;&lt;p&gt;And so I learned something - there&#39;s something in the developer mindset that is bothered by the idea of people submitting invalid email addresses. The idea that &amp;nbsp;my regex could allow some invalid cases through bothered me, and I enjoyed the puzzle of coming up with a regular expression that would validate my example email addresses.&lt;/p&gt;&lt;p&gt;But lets take a step back and think about the purpose of validating an email. The main thing you want to catch is the case when a user accidentally mistypes their email or doesn&#39;t realize that they need to provide an email (for example, they enter a name or username instead).&lt;/p&gt;&lt;p&gt;Your app is not the email police, sent out into the world to punish users who have invalid or unusual characters in their email address. You just want to gently nudge the user if they enter something that is obviously not an email address, and otherwise let them get on with it.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Rejecting a single users real email address is many times worse than allowing multiple invalid emails into your database&lt;/em&gt;. You want to minimize false positives and who cares about false negatives.&lt;/p&gt;&lt;p&gt;And to that end, you don&#39;t really need a complicated regular expression. &amp;nbsp;You just need one that recognizes when something vaguely along the lines of something@somewhere.someplace. And that&#39;s enough. If ensuring that your user enters a valid email is valid is important to your app, then send them a confirmation email. That&#39;s the only way to ensure they&#39;ve entered their valid email address.&lt;/p&gt;&lt;p&gt;So, getting back to the technical details. What regex should we use to validate our emails? Lets look at a few common examples that I collected(sources are in the table below). We&#39;ll evaluate these regexes against this &lt;a href=&quot;http://codefool.tumblr.com/post/15288874550/list-of-valid-and-invalid-email-addresses&quot;&gt;list of valid and invalid emails&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Here&#39;s a quick &#39;n&#39; dirty script to check a few email validation regular expressions.&lt;/p&gt;&lt;script src=&quot;https://gist.github.com/aidanf/2e7b8cbf6fecc2567f19.js&quot;&gt;&lt;/script&gt;&lt;p id=&quot;yui_3_17_2_7_1413371187242_12615&quot;&gt;And here&#39;s the results:&lt;/p&gt;&lt;table border=&quot;1&quot; style=&quot;table-layout: fixed;word-break: break-all;&quot; width=&quot;100%&quot; cellpadding=&quot;3&quot; cellspacing=&quot;3&quot;&gt;
  	&lt;tr&gt;
    	&lt;th width=&quot;40%&quot;&gt;Regex&lt;/th&gt;
	    &lt;th style=&quot;word-break: normal;&quot;&gt;Valid emails rejected (17)&lt;/th&gt;
	    &lt;th style=&quot;word-break: normal;&quot;&gt;Invalid emails accepted (20)&lt;/th&gt;
	    &lt;th width=&quot;30%&quot;&gt;Source&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  	&lt;td&gt;/@/&lt;/td&gt;
	  	&lt;td&gt;0&lt;/td&gt;
	  	&lt;td&gt;18&lt;/td&gt;
	  	&lt;td&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  	&lt;td&gt;&lt;code&gt;/.+@.+\..+/i&lt;/code&gt;&lt;/td&gt;
	  	&lt;td&gt;0&lt;/td&gt;
	  	&lt;td&gt;16&lt;/td&gt;
	  	&lt;td&gt;&lt;a href=&quot;http://davidcel.is/blog/2012/09/06/stop-validating-email-addresses-with-regex/&quot;&gt;davidcel.is&lt;/a&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  	&lt;td&gt;&lt;code&gt;/^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i&lt;/code&gt;&lt;/td&gt;
	  	&lt;td&gt;5&lt;/td&gt;
	  	&lt;td&gt;9&lt;/td&gt;
	  	&lt;td&gt;&lt;a href=&quot;http://www.aidanf.net/posts/rails-authentication-tutorial&quot;&gt;aidanf.net&lt;/a&gt;&lt;/a&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  	&lt;td&gt;&lt;code&gt;/^[-a-z0-9~!$%^&amp;*_=+}{\&#39;?]+(\.[-a-z0-9~!$%^&amp;*_=+}{\&#39;?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i&lt;/code&gt;&lt;/td&gt;
	  	&lt;td&gt;5&lt;/td&gt;
	  	&lt;td&gt;0&lt;/td&gt;
	  	&lt;td&gt;&lt;a href=&quot;https://fightingforalostcause.net/content/misc/2006/compare-email-regex.php&quot;&gt;fightingforalostcause.net&lt;/a&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  	&lt;td&gt;&lt;code&gt;/^([\w\.%\+\-]+)@([\w\-]+\.)+([\w]{2,})$/i&lt;/code&gt;&lt;/td&gt;
	  	&lt;td&gt;5&lt;/td&gt;
	  	&lt;td&gt;7&lt;/td&gt;
	  	&lt;td&gt;&lt;a href=&quot;http://awesoham.wordpress.com/2013/10/02/a-simple-regex-for-rails-email-validation/&quot;&gt;awesoham.wordpress.com&lt;/a&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  	&lt;td&gt;&lt;code&gt;/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i&lt;/code&gt;&lt;/td&gt;
	  	&lt;td&gt;6&lt;/td&gt;
	  	&lt;td&gt;7&lt;/td&gt;
	  	&lt;td&gt;&lt;a href=&quot;https://www.railstutorial.org/book/modeling_users&quot;&gt;railstutorial.org&lt;/a&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  	&lt;td&gt;&lt;code&gt;/\A[^@\s]+@([^@.\s]+\.)+[^@.\s]+\z/i&lt;/code&gt;&lt;/td&gt;
	  	&lt;td&gt;3&lt;/td&gt;
	  	&lt;td&gt;10&lt;/td&gt;
	  	&lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4770133/rails-regex-for-email-validation&quot;&gt;stackoverflow.com&lt;/a&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  	&lt;td&gt;&lt;code&gt;/\A[^@\s]+@([^@.\s]+\.)*[^@.\s]+\z/i&lt;/code&gt;&lt;/td&gt;
	  	&lt;td&gt;3&lt;/td&gt;
	  	&lt;td&gt;11&lt;/td&gt;
	  	&lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4770133/rails-regex-for-email-validation&quot;&gt;stackoverflow.com&lt;/a&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  	&lt;td&gt;&lt;code&gt;/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i&lt;/code&gt;&lt;/td&gt;
	  	&lt;td&gt;7&lt;/td&gt;
	  	&lt;td&gt;7&lt;/td&gt;
	  	&lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4770133/rails-regex-for-email-validation&quot;&gt;stackoverflow.com&lt;/a&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  	&lt;td&gt;&lt;code&gt;/\A(\S+)@(.+)\.(\S+)\z/i&lt;/code&gt;&lt;/td&gt;
	  	&lt;td&gt;1&lt;/td&gt;
	  	&lt;td&gt;13&lt;/td&gt;
	  	&lt;td&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4770133/rails-regex-for-email-validation&quot;&gt;stackoverflow.com&lt;/a&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;The important thing to take away from these results is that &lt;em&gt;none of these regular expressions are very good at both accepting valid emails and rejecting invalid ones&lt;/em&gt;. And since I think it&#39;s much worse to reject a valid emails than to accept an invalid one, that just leaves us with one of the first two. i.e. the simplest ones on the list.&lt;/p&gt;&lt;p&gt;In fact, it&#39;s probably better to validate email on the client side, but still allow the user to submit the email even if your validation thinks it&#39;s invalid (maybe with minimal server-side validation such as /@/). That way you can give them a helpful hint if it looks like they&#39;ve entered an invalid email, but still allow the people with unusual emails to submit them.&lt;/p&gt;&lt;p&gt;Here are some related links:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://fightingforalostcause.net/content/misc/2006/compare-email-regex.php&quot;&gt;Comparing E-mail Address Validating Regular Expressions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://ex-parrot.com/~pdw/Mail-RFC822-Address.html&quot;&gt;An RFC compliant regular expression for validating emails&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://davidcel.is/blog/2012/09/06/stop-validating-email-addresses-with-regex/&quot;&gt;Stop validating emails with complicated regular expressions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://codefool.tumblr.com/post/15288874550/list-of-valid-and-invalid-email-addresses&quot;&gt;A list of valid and invalid email addresses&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4770133/rails-regex-for-email-validation&quot;&gt;StackOverflow discussion on validating emails in rails&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://fightingforalostcause.net/content/misc/2006/compare-email-regex.php&quot;&gt;Comparing E-mail Address Validating Regular Expressions&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
        <pubDate>Fri, 17 Oct 2014 00:00:00 +0100</pubDate>
        <link>http://www.aidanf.net/posts/validating-emails-in-rails</link>
        <guid isPermaLink="true">http://www.aidanf.net/posts/validating-emails-in-rails</guid>
        
        
      </item>
    
      <item>
        <title>Getting started with emacs for clojure development</title>
        <description>&lt;p&gt;Emacs is a great tool for clojure development. In fact you often hear people raving about the marriage of emacs and clojure without any clear explanation of if or why it&#39;s better than any other editor that you could use for clojure development.&lt;/p&gt;&lt;p&gt;I&#39;m not going to get into why emacs is good for clojure development here. The aim of this post is to help someone who is looking to try it get up and running quickly, so they can try it for themselves.&lt;/p&gt;&lt;p&gt;I&#39;m assuming you already have emacs installed and &lt;a href=&quot;/posts/getting-setup-with-clojure&quot;&gt;clojure setup&lt;/a&gt;. I won&#39;t go into the basics of using emacs here, but I&#39;ll outline a few of the features that you may find handy for working with clojure code.&lt;/p&gt;&lt;h2&gt;Emacs Live&lt;/h2&gt;&lt;p&gt;The quickest way to get your emacs up and running is to install &lt;a href=&quot;https://github.com/overtone/emacs-live&quot;&gt;emacs-live&lt;/a&gt;. Emacs live is&lt;/p&gt;&lt;blockquote&gt;&quot;An opinionated set of defaults for getting started with a specific focus on live coding with&amp;nbsp;&lt;a href=&quot;http://overtone.github.io/&quot;&gt;Overtone&lt;/a&gt;&lt;span style=&quot;font-size:16px&quot;&gt;and&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://github.com/quil/quil&quot;&gt;Quil&lt;/a&gt;&lt;span style=&quot;font-size:16px&quot;&gt;.&quot; &lt;/span&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-size:16px&quot;&gt;It provides an excellent default setup for working with clojure.&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;Emacs Modes for clojure development&lt;/h2&gt;&lt;p&gt;Among the most important modes are &lt;a href=&quot;https://github.com/clojure-emacs/clojure-mode&quot;&gt;Clojure-mode&lt;/a&gt; and &lt;a href=&quot;http://www.emacswiki.org/ParEdit&quot;&gt;Paredit&lt;/a&gt; along with repl integration via &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;Cider&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Paredit&lt;/h3&gt;&lt;p&gt;One of the most common complaints I hear from people who haven&#39;t tried clojure is about the abundant parentheses and how difficult they are to manage. Managing and matching parentheses is really a problem for the text editor, not the programmer. If you have trouble with unmatched parentheses, then either your text editor is not up to the task or you&#39;re not using it correctly.&lt;/p&gt;&lt;p&gt;Paredit mode is an emacs mode that takes care of the minutiae of working with s-expressions. Some of the things it does for you include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensures your parentheses are always balanced. E.g. It won&#39;t allow you to create an opening bracket without the corresponding bracket, or it won&#39;t let you delete a single bracket - you have to delete the entire expression.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Lets you cut, paste, move etc s-expressions in their entirety. You can move the entire sub-tree of an expression somewhere else or wrap an entire expression with another one.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you&#39;ve never used Paredit before, it can be a little off-putting. You need to move from thinking in terms of text-tokens to thinking in terms of expressions. Once you get used to it though, the parentheses that so many people are wary of fade into the background. They become easy to manage.&lt;/p&gt;&lt;p&gt;To get a feel for Paredit, lets edit a small clojure file and play around with the brackets.&lt;/p&gt;&lt;p&gt;Lets create a new clojure project...&lt;/p&gt;&lt;script src=&quot;https://gist.github.com/aidanf/e54a8b6438a1b05e2452.js?file=terminal.sh&quot;&gt;&lt;/script&gt;&lt;p id=&quot;yui_3_17_2_1_1411661917196_162585&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;...and then open the generated core.clj file.&lt;/p&gt;&lt;script src=&quot;https://gist.github.com/aidanf/e54a8b6438a1b05e2452.js?file=core.clj&quot;&gt;&lt;/script&gt;&lt;p id=&quot;yui_3_17_2_1_1411661917196_164775&quot;&gt;If you&#39;ve setup emacs-live you should see the following list of active modes when you open this file:&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;/images/pareditmode.png&quot; alt=&quot;Active modes for a .clj file: Clojure, Undo-Tree, yas, VHl, AC, Paredit&quot;/&gt; &lt;br/&gt;&lt;b&gt;Active modes for a .clj file: Clojure, Undo-Tree, yas, VHl, AC, Paredit&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;Now, try to delete a closing &quot;)&quot;. You can&#39;t. Navigate to the opening &quot;(&quot; of the println form. Press C-k to delete it. Notice that it deletes the entire form, but not the entire line - the last &quot;)&quot; remains. Keep, pressing C-k - you can&#39;t delete that closing &quot;)&quot;!&lt;/p&gt;&lt;p&gt;Press C-y to paste the println form back to where it was. Now highlight the println form (Press C-space on the opening &quot;(&quot; and then move the cursor to the closing &quot;)&quot; ). Now if you enter an opening bracket &quot;(&quot; it will wrap that entire expression with brackets. There&#39;s a lot more stuff you can do with Paredit mode that facilitates working with lisp-forms - take some time to get comfortable with it.&lt;/p&gt;&lt;h3&gt;Clojure-mode&lt;/h3&gt;&lt;p&gt;This provides indentation, highlighting and navigation for your clojure code. You don&#39;t really need to learn to use it - just know that you need what it provides.&lt;/p&gt;&lt;h3&gt;Cider&lt;/h3&gt;&lt;p&gt;Cider provides a set of commands for starting and running a repl from emacs, and then sending code for evaluation to that repl. This is core to emacs clojure development. You get into a workflow of constantly evaluating and re-evaluating functions as you iterively develop them and incrementally build up a working program in the repl.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Let&#39;s continue with our example project from above and launch a repl from emacs.&lt;/p&gt;&lt;p&gt;&lt;code&gt;M-x nrepl-jack-in&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;will start a repl (This command may be cider-jack-in instead of nrepl-jack-in, depending on which version of cider you have installed). Once it&#39;s started you should be able to enter clojure code in the repl and see the results immediately.&lt;/p&gt;

&lt;p&gt;Let&#39;s evaluate some of our clojure code in the repl. The handiest way to do this is &lt;code&gt;C-c C-e&lt;/code&gt;. This will evaluate the previous form in the text window and print the results.&lt;/p&gt;

&lt;p&gt;Lets navigate to the space just after the last closing &quot;)&quot;. Now if you run &lt;code&gt;C-c C-e&lt;/code&gt; you should see the results of evaluating that function in your status window i.e. (&lt;code&gt;#hello.core/foo&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now switch you the repl window and change to the hello.core namespace.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(ns hello.core)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can now run the foo function from the repl.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(foo &quot;Goodbye&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let&#39;s say our foo function is broken and we want to debug it. We&#39;ll set x in the repl and then we can step into our function and evaluate the forms in the function individually.&lt;/p&gt;

&lt;p&gt;In the repl enter &lt;/p&gt;

&lt;p&gt;&lt;code&gt;(def x &quot;Broken&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now go back to the core.clj file and navigate the cursor to the space after the closing bracket of the angle println form. If we press &lt;code&gt;C-c C-e&lt;/code&gt; we should see &quot;Broken Hello, World!&quot;in the repl&lt;/p&gt;

&lt;p&gt;This is a very simple example, but in this way we can step through functions evaluating forms, seeing what every form in a function evaluates to for a given input. We can re-evaluate a function at any time to update the code that the repl is running. This gives us a lot of power to inspect how our code is behaving and to interively build up a working program in the repl.&lt;/p&gt;

&lt;p&gt;Here are a few more commands that are useful for interacting with the repl and evaluating code. You can find the full list of available commands in the &lt;a href=&quot;https://github.com/clojure-emacs/cider#keyboard-shortcuts&quot;&gt;cider documentation&lt;/a&gt;.&lt;/p&gt;&lt;table&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;&lt;i&gt;Buffer Shortcuts&lt;/i&gt;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;C-c C-e&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;Evaluate the form preceding the cursor and print the result to the echo area&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;C-c C-r&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;Evaluate the highlighted region&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;C-c M-n&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;Switch the namespace of the repl buffer to the namespace of the current buffer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;C-c C-z&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;Switch to the repl buffer (and back to previous buffer)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;C-c C-k&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;Load (all) the current buffer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;C-c C-d&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;Display the doc string for the symbol under the cursor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;&lt;i&gt;Repl Shortcuts&lt;/i&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;M-p&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;previous repl command&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;M-n&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;next repl command&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;Tab&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;Autocomplete current symbol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;C-c C-z&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;Back to previous buffer&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;&lt;p&gt;So that&#39;s a very quick and basic tour of how to get started with emacs for clojure development. The best thing to do now is to jump in and start using emacs for editing clojure code, while at the same time reading the paredit and cider documentation and incorporating them into your workflow as you go along.&lt;/p&gt;&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Fri, 03 Oct 2014 00:00:00 +0100</pubDate>
        <link>http://www.aidanf.net/posts/getting-started-with-emacs-for-clojure-development</link>
        <guid isPermaLink="true">http://www.aidanf.net/posts/getting-started-with-emacs-for-clojure-development</guid>
        
        
      </item>
    
      <item>
        <title>What&#39;s in a name?</title>
        <description>&lt;p&gt;A while ago I started using &lt;a href=&quot;https://www.sqwiggle.com&quot;&gt;Sqwiggle&lt;/a&gt; with a client. It’s an app that helps remote workers collaborate. I like it and found it useful, but that’s another story.&lt;/p&gt;

&lt;p&gt;I tweeted about it, and one of the founders of sqwiggle replied, which got me thinking a bit more about naming.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/aidanf&quot;&gt;@aidanf&lt;/a&gt; we&amp;#39;re no Google, but I imagine they had the same sort of feedback ;)&lt;/p&gt;&amp;mdash; Eric Bieller (@ericbieller) &lt;a href=&quot;https://twitter.com/ericbieller/statuses/433837587564740608&quot;&gt;February 13, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;I remember back when Google first came out. I remember recommending it to friends and having to spell it out to them - the double-o and single-g would regularly catch people out. But their search was &lt;em&gt;so much better&lt;/em&gt; than the alternatives at the time that the name didn’t particularly matter. People sought it out.&lt;/p&gt;

&lt;p&gt;If it’s not obvious how to spell something, its much harder for your target audience to remember it. If upon hearing it you’re customers don’t immediately know how to spell your name, they are less likely to go to your website.&lt;/p&gt;

&lt;p&gt;A bad name will kill your ability to spread via word of mouth. All those tech meet ups where someone recommends your app to someone will come to naught, as they struggle to remember it, or struggle to find it because they don’t know how to spell it.&lt;/p&gt;

&lt;p&gt;If you are constantly spelling, or explaining your name to people, then take that as a warning sign - it’s probably not a good name. The most important features of a name are that it should be memorable, easily spellable and, as a bonus, descriptive. Unless you’re Google of course.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Jul 2014 00:00:00 +0100</pubDate>
        <link>http://www.aidanf.net/posts/whats-in-a-name</link>
        <guid isPermaLink="true">http://www.aidanf.net/posts/whats-in-a-name</guid>
        
        <category>bootstrapping</category>
        
        
      </item>
    
      <item>
        <title>Developer? - you&#39;ve got superpowers!</title>
        <description>&lt;p&gt;As developers we are surrounded by other developers in our day-to-day work-lives. And many of us have been writing code for as long as we can remember. As such we tend to normalise the skills that we have. In fact, we often underestimate the value of our skill set, since we work all day with other programmers who are just as, or even more, capable at programming that we are.&lt;/p&gt;

&lt;p&gt;But from the perspective of someone who can’t write code, we effectively appear to have a superpower. To someone who can’t code, what we do looks like magic.&lt;/p&gt;

&lt;p&gt;I’ve regularly work with people who are not programmers who are trying to create a tech business. I see their frustration as they struggle to translate their vision into a live working product. That frustration comes from not being able to do it themselves, from always having to get someone else to build it, from having to ask someone else for every little change that they need to make.&lt;/p&gt;

&lt;p&gt;Imagine you were building an app, and for every change you wanted to make, you had to contact someone, describe in detail what you want, and then wait for them to do it. Imagine the sense of powerlessness over the destiny of your business.&lt;/p&gt;

&lt;p&gt;As developers, we can create things at will. Have an idea? We can knock up a quick demo or MVP in our own time relatively easily. It seems trivial and normal to us, because we write code all day long. It seems easy. But to the rest of the world it’s not - it’s some kind of magic.&lt;/p&gt;

&lt;p&gt;One result of this is that we tend to undervalue our skills.&lt;/p&gt;

&lt;p&gt;If you’re working for someone else you are &lt;a href=&quot;http://michaelochurch.wordpress.com/2014/05/24/whats-a-mid-career-software-engineer-actually-worth-try-779000-per-year-as-a-lower-bound/&quot;&gt;almost certainly underpaid&lt;/a&gt; relative to the value you generate for your company. Even more so if you work for a startup.&lt;/p&gt;

&lt;p&gt;Similarly if you’re a freelance developer, there’s a good chance that you’re don’t charge enough for your services. I know I’m guilty of this. In the 10 years or so I’ve been freelancing, my rate has been pretty static. I feel uncomfortable asking people for money to do work that I enjoy and seems easy to me.&lt;/p&gt;

&lt;p&gt;That’s just a side issue though. Much more important than what we earn is the realisation of the potential value of our skillset. &lt;a href=&quot;http://news.rapgenius.com/Marc-andreessen-why-software-is-eating-the-world-annotated&quot;&gt;Software is eating the world&lt;/a&gt;, but in terms of the general population, the ability to build software is still relatively rare. We’re lucky to live in a time when it’s easy to build software. The only barrier to entry that remains is the knowledge of how to do it.&lt;/p&gt;

&lt;p&gt;So, if you’re a developer, be aware of the value of your skill-set. Don’t waste it.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Jul 2014 12:00:00 +0100</pubDate>
        <link>http://www.aidanf.net/posts/developer-superpower</link>
        <guid isPermaLink="true">http://www.aidanf.net/posts/developer-superpower</guid>
        
        <category>productive-programmer</category>
        
        
      </item>
    
      <item>
        <title>Web Development with Clojure - a short review</title>
        <description>&lt;p&gt;I’ve just finished working through “&lt;a href=&quot;http://pragprog.com/book/dswdcloj/web-development-with-clojure&quot;&gt;Web Development with Clojure&lt;/a&gt;” by Dmitry Sotnikov (Note: I read the beta version (b5, b6) but I believe it’s pretty close to the final version apart from formatting and corrections).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/web-dev-clojure-book.jpg&quot; alt=&quot;Web Development with Clojure Cover&quot; title=&quot;Web Development with Clojure Cover&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The author is one of the creators of the &lt;a href=&quot;http://www.luminusweb.net/&quot;&gt;luminus framework&lt;/a&gt; and it shows in this book. The style of code and how he organizes his code is more or less identical to that espoused by luminus.&lt;/p&gt;

&lt;p&gt;When I initially perused the table-of-contents for this book online, I wasn’t impressed. It seemed like a short tutorial on building a basic picture gallery. Several of the libraries that I like to use for clojure web development were almost entirely absent. But after reading it I realize that it provides a good base for building clojure web-apps - and while it focuses on different libraries that those I’ve used up to now, and it organizes code differently to how I have been organizing mine - it does a good job of showing you how to drop in libraries for particular parts of your app.&lt;/p&gt;

&lt;p&gt;And that’s the thing with web development in clojure. There are lots of libraries and very few frameworks. This can be offputting for someone who has spent the last few years working in a monolithic framework such as rails or django. In contrast, clojure espouses the use of small reusable libraries. “Libraries, not frameworks” is the mantra.&lt;/p&gt;

&lt;p&gt;One of the most common questions I hear from rails devs who are interested in clojure is “Which web framework should I use? What’s the rails equivalent in clojure-land?” Once you’ve gotten comfortable with clojure you’ll realize that the code you write in clojure is usually simpler and more reusable than what you would write in rails. In that context, a monolithic framework such as rails no longer makes as much sense. Why impose the restrictions of a monolithic framework on yourself when you can easily compose a set of libraries to behave exactly how you want. Basically you create your own custom framework that behaves exactly how you want.&lt;/p&gt;

&lt;p&gt;If you’re a rails dev, this probably sounds like a lot of work, but by the time you work through this book you’ll easily be able to do that. The luminus framework is at it’s core a set of decisions on which libraries to use and how to organize your code. Once you’ve decided which libraries you want to use and how you want to organize your code, you can create yourself a lein template and you’ve got yourself a framework.&lt;/p&gt;

&lt;p&gt;So who is this book for? It’s probably too dense and moves too fast to be suitable for someone who hasn’t build web apps in some other language (I could be wrong). But for someone who is fairly experienced at building web apps in some other language (cough ruby/rails), knows a bit of clojure and is interested in how you do web-development in clojure, I’d say this book is a good primer. It covers the basics, chooses a few libraries and shows you how to use them, outlines some alternative libraries and gives you the tools/knowledge to continue exploring the clojuer web-development universe.&lt;/p&gt;

&lt;p&gt;One thing I think would add to this book is an appendix outlining or at least listing all the alternative libraries for various parts of your web-stack. There is one chapter that outlines alternatives for some of the library choices and shows you how to adapt the sample app. This chapter is tremendously useful for showing how you can easily add switch libraries to your web app but I feel an appendix outlining all the options would be useful.&lt;/p&gt;

&lt;p&gt;So in summary, this book exceeded my expectations (which were probably influenced by by my biases/preferences for particular libraries). It’s an example of my favourite type of programming book: short, no fluff and provides lots of value.&lt;/p&gt;

&lt;p&gt;For the curious, the library stack used in this book is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ring, obviously.&lt;/li&gt;
  &lt;li&gt;lib-noir for sessions and validation.&lt;/li&gt;
  &lt;li&gt;compojure for routing.&lt;/li&gt;
  &lt;li&gt;hiccup for templating, later replaced with selmer.&lt;/li&gt;
  &lt;li&gt;database access using jdbc, later replaced with korma.&lt;/li&gt;
  &lt;li&gt;Initially plain javascript, later switched to clojurescript.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 12 Feb 2014 14:00:00 +0000</pubDate>
        <link>http://www.aidanf.net/posts/web-development-with-clojure-review</link>
        <guid isPermaLink="true">http://www.aidanf.net/posts/web-development-with-clojure-review</guid>
        
        <category>clojure</category>
        
        <category>review</category>
        
        
      </item>
    
      <item>
        <title>Getting setup with clojure</title>
        <description>&lt;p&gt;In this article we’ll step throught how to get setup with clojure. By the end you’ll have a working clojure installation and a simple “hello world” project that you can run through the repl and on the command line.&lt;/p&gt;

&lt;h3 id=&quot;first-some-terminology&quot;&gt;First some terminology…&lt;/h3&gt;

&lt;h4 id=&quot;clojure&quot;&gt;Clojure&lt;/h4&gt;
&lt;p&gt;Clojure is a lisp-like functional language that runs on the jvm. We won’t go into any detail about the language here. Our main aim here is to show you how to install clojure and get a clojure project up and running.&lt;/p&gt;

&lt;p&gt;So at a high level we have clojure the language. But what does that mean in practical terms? In practical terms, it’s a jar file that compiles your clojure code into byte code that can be executed on the jvm. We don’t want to manage compiling our clojure projects manually so we want a tool that will help automate many of the tasks we’ll regularly want to do with our clojure projects. For that we use leiningen.&lt;/p&gt;

&lt;h4 id=&quot;leiningen&quot;&gt;Leiningen&lt;/h4&gt;
&lt;p&gt;Leiningen is a build tool for managing clojure projects and their dependencies. E.g. think of rake in ruby or ant in java. Lein fulfils a similar purpose in the clojure universe.
We’ll use Leiningen to create projects, package them, run them, start a repl etc. You can get leiningen at &lt;a href=&quot;http://www.leiningen.org&quot;&gt;leiningen.org&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;so-how-do-i-install-clojure&quot;&gt;So how do I install clojure?&lt;/h3&gt;
&lt;p&gt;The short answer is we won’t install clojure directly. Instead we’ll install Leiningen, create a project and add clojure as a dependency on that project. This can be a bit confusing if you’re coming from something like ruby or python, where you install the langauge runtime and then use that to run your scripts or launch a repl.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; go down the route of installing clojure as a binary and running your projects directly using that binary (along with all the associated class-path-management headaches) but it’s much easier to just use leiningen to manage running your clojure project.&lt;/p&gt;

&lt;h3 id=&quot;installing-leiningen&quot;&gt;Installing leiningen&lt;/h3&gt;
&lt;p&gt;The only Prerequisite before getting started is that we have java installed. To check if you have java installed, run java -version at the command line. You should see something like this…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;java -version
java version &lt;span class=&quot;s2&quot;&gt;&quot;1.7.0_45&quot;&lt;/span&gt;
Java&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; SE Runtime Environment &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 1.7.0_45-b18&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Java HotSpot&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 64-Bit Server VM &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 24.45-b08, mixed mode&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you get an error message, then you need to go and install java before coming back to this step.&lt;/p&gt;

&lt;p&gt;Once you have java installed, you’re ready to install leiningen. &lt;a href=&quot;http://leiningen.org/&quot;&gt;Go to leiningen.org&lt;/a&gt; and download the lein installer script (or lein.bat if you’re on windows).
Make this script executable and run it. The script that you download is an installer, so the first time you run this it will download leiningen and install it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;wget https://raw.github.com/technomancy/leiningen/stable/bin/lein
--2013-12-13 14:47:05--  https://raw.github.com/technomancy/leiningen/stable/bin/lein
Resolving raw.github.com... 185.31.17.133
Connecting to raw.github.com|185.31.17.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 11440 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;11K&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;text/plain]
Saving to: ‘lein’

2013-12-13 14:47:14 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.96 MB/s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; - ‘lein’ saved &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;11440/11440]

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod +x lein
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./lein
Downloading Leiningen to /Users/aidan/.lein/self-installs/leiningen-2.3.4-standalone.jar now...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you’ve successfully installed leinengen you should be able to run the lein command. If you run lein –version you should see that you have version 2 installed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;lein --version
Leiningen 2.3.2 on Java 1.7.0_45 Java HotSpot&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 64-Bit Server VM&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;create-a-new-project&quot;&gt;Create a new project&lt;/h3&gt;
&lt;p&gt;Now we’ll use the lein command to create a new project. The ‘lein new’ command creates a new project.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;lein new app getting-setup-with-clojure
Generating a project called getting-setup-with-clojure based on the &lt;span class=&quot;s1&quot;&gt;&#39;app&#39;&lt;/span&gt; template.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The app argument to ‘lein new’ here specifies which project template to use. Lein has several templates for creating new projects (and you can easily add your own) and the ‘app’ argument here tells it to use the app template. The app template is for creating executable apps. When we run this command we end up with a directory with our new project in it.&lt;/p&gt;

&lt;p&gt;Lets take a look at the project directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;getting-setup-with-clojure/
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tree .
.
├── LICENSE
├── README.md
├── doc
│   └── intro.md
├── project.clj
├── resources
├── src
│   └── getting_setup_with_clojure
│       └── core.clj
└── &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
    └── getting_setup_with_clojure
            └── core_test.clj

6 directories, 6 files&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So this is what a new clojure project looks like. The &lt;code class=&quot;highlighter-rouge&quot;&gt;doc&lt;/code&gt; directory is for documentation. The &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; directory contains your source code and the &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; directory is where you put your tests. project.clj at the root of the project is where you configure your project. &lt;code class=&quot;highlighter-rouge&quot;&gt;src/getting_setup_with_clojure/core.clj&lt;/code&gt; is our entry point for writing clojure code in the project.&lt;/p&gt;

&lt;p&gt;In the next section we’ll take a look at the contents of project.clj&lt;/p&gt;

&lt;h3 id=&quot;install-our-project-dependencies&quot;&gt;Install our project dependencies&lt;/h3&gt;
&lt;p&gt;Lets have a look at project.clj. Here we define and configure our project and it’s dependencies. You can change your project description, version number, main function, licence, etc.
One of the main things you will use project.clj for is adding dependencies for the project. This tells lein which libraries it needs to load when running your project.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defproject&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getting-setup-with-clojure&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.1.0-SNAPSHOT&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:description&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FIXME: write description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://example.com/FIXME&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:license&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Eclipse Public License&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:dependencies&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org.clojure/clojure&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.5.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:main&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getting-setup-with-clojure.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:profiles&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:uberjar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:aot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see here that lein has already added the latest version of clojure as a dependency. Lets add a second dependency to the project. We do this by adding the name and version of the library to the :dependencies vector.&lt;/p&gt;

&lt;p&gt;We’re going to add clj-time as a dependency. clj-time is a library that provides a bunch of time related functions.
If we go to the clj-time github page and scroll down we can find the dependency vector for the latest version of the clj-time library. In this case it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;[clj-time &quot;0.6.0&quot;]&lt;/code&gt;.
Most clojure libraries will have this vector for their latest verstion near the top of their README. So we can copy this directly over to our list of dependencies on project.clj&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defproject&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getting-setup-with-clojure&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.1.0-SNAPSHOT&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:description&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Getting setup with clojure&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://example.com/FIXME&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:license&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Eclipse Public License&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:dependencies&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org.clojure/clojure&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.5.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clj-time&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:main&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getting-setup-with-clojure.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:profiles&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:uberjar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:aot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So how do we install these dependencies? Well, the next time we run a lein command on our project, lein will automatically install these libraries if we haven’t previously installed them. Lein installs libraries to a local maven repository, if they don’t already exist there. Once you’ve installed a dependency once you don’t need to install it again.&lt;/p&gt;

&lt;h3 id=&quot;launch-a-repl&quot;&gt;Launch a repl&lt;/h3&gt;
&lt;p&gt;So now lets launch a repl. We do this with lein repl.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;n&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lein&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Retrieving&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org/clojure/clojure/1.5.1/clojure-1.5.1.pom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;central&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Retrieving&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clj-time/clj-time/0.6.0/clj-time-0.6.0.pom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clojars&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Retrieving&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org/clojure/clojure/1.5.1/clojure-1.5.1.jar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;central&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Retrieving&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clj-time/clj-time/0.6.0/clj-time-0.6.0.jar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clojars&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nREPL&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;started&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64843&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.0.1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REPL-y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clojure&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Docs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function-name-here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;find-doc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;part-of-name-here&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function-name-here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Javadoc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;javadoc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java-object-or-class-here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Control+D&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getting-setup-with-clojure.core=&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As expected, the first time we launch this, lein will download and install the projects dependencies.
Once the dependencies are installed, we end up in a repl, where we can run and evaluate clojure code. Lets run some clojure forms. Each time we enter a form in the repl, it evaluates it and prints the result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;n&quot;&gt;getting-setup-with-clojure.core=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getting-setup-with-clojure.core=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getting-setup-with-clojure.core=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getting-setup-with-clojure.core=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now lets open up our core.clj file. At the moment this contains our main function, which is the function that will be executed if we run this project from the command line. The default main function just prints “Hello World”.&lt;/p&gt;

&lt;p&gt;Let’s import and use clj-time. We use require to import the clj-time core library as &lt;code class=&quot;highlighter-rouge&quot;&gt;:ct&lt;/code&gt;. Now we can call functions from clj-time.core using ct/function-name. clj-time has a function called now that returns the current time. Let’s add that to our print statement in the main function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getting-setup-with-clojure.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clj-time.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:gen-class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-main&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I don&#39;t do a whole lot ... yet.&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World at &quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ct/now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll save that file and launch a new repl. We can now call &lt;code class=&quot;highlighter-rouge&quot;&gt;ct/now&lt;/code&gt; in the repl to get the current time.
Lets add that call into the main function too. Now when we call the -main function in the repl, we see that it also prints the current time. (We’re not going to worry about formatting the time here).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;getting-setup-with-clojure.core=&amp;gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ct/now&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&amp;lt;DateTime 2013-12-17T11:30:39.294Z&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;getting-setup-with-clojure.core=&amp;gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Hello, World at  &lt;span class=&quot;c&quot;&gt;#&amp;lt;DateTime 2013-12-17T11:30:44.957Z&amp;gt;&lt;/span&gt;
nil
getting-setup-with-clojure.core&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we’ll create an executable version of our project so that we can run our main function from the command line.&lt;/p&gt;

&lt;h3 id=&quot;create-an-executable-jar&quot;&gt;Create an executable jar&lt;/h3&gt;
&lt;p&gt;We create an executable jar using leins uberjar command. This bundles all the projects dependencies into a single jar file that we can execute from the command line.
When we run lein uberjar, we get a jar file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; directory. We can run that jar file at the command line and it will run our projects main function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;lein uberjar
Warning: specified :main without including it &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; :aot.
Implicit AOT of :main will be removed &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Leiningen 3.0.0.
If you only need AOT &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;your uberjar, consider adding :aot :all into your
:uberjar profile instead.
Created ./target/getting-setup-with-clojure-0.1.0-SNAPSHOT.jar
Created ./target/getting-setup-with-clojure-0.1.0-SNAPSHOT-standalone.jar&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can run this jar file directly from the command line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;java -jar target/getting-setup-with-clojure-0.1.0-SNAPSHOT-standalone.jar
Hello, World at  &lt;span class=&quot;c&quot;&gt;#&amp;lt;DateTime 2014-02-06T09:11:34.736Z&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;
&lt;p&gt;We’ve created a clojure project, installed clojure, installed an external dependency, started a clojure repl for your project and created an executable jar for your project. Now it starts to get fun! Next up - exploring the repl.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Feb 2014 14:00:00 +0000</pubDate>
        <link>http://www.aidanf.net/posts/getting-setup-with-clojure</link>
        <guid isPermaLink="true">http://www.aidanf.net/posts/getting-setup-with-clojure</guid>
        
        <category>clojure</category>
        
        <category>30-days-of-clojure</category>
        
        
      </item>
    
      <item>
        <title>Clearing out some old books</title>
        <description>&lt;p&gt;I’m clearing some space on my bookshelves and I’m getting rid of a few
books. Rather than throw them out I’m hoping that someone else can get
some use from them. If you are interested in any of them &lt;a href=&quot;http://www.aidanf.net/contact&quot;&gt;send me an
email&lt;/a&gt;. Books can be collected in Sligo
or I can mail them to you (within Ireland). One condition - don’t take a book unless
you are genuinely going to read it - unread, hoarded books make me sad
and you might have blocked someone else who could have made use of it.&lt;/p&gt;

&lt;p&gt;So here’s the list, shout if you want one.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Agile Web Development with Rails - Dave Thomas (1st Edition)&lt;/li&gt;
  &lt;li&gt;Agile Web Development with Rails - Dave Thomas (2nd Edition)&lt;/li&gt;
  &lt;li&gt;The Rails Way - Obie Fernandez&lt;/li&gt;
  &lt;li&gt;Rails Recipes - Chad Fowler&lt;/li&gt;
  &lt;li&gt;Advanced Rails Recipes - Mike Clarke&lt;/li&gt;
  &lt;li&gt;Beginning Ruby on Rails E-commerce - Christian Hellsten and Jarkko
Laine&lt;/li&gt;
  &lt;li&gt;Rails Cookbook - Rob Orsini&lt;/li&gt;
  &lt;li&gt;Ajax on Rails - Scott Raymond&lt;/li&gt;
  &lt;li&gt;Pro Drupal Development (1st edition) - John K. VanDyk and Matt Westgate&lt;/li&gt;
  &lt;li&gt;Pro Dripal Development (2nd edition) - John K. VanDyk&lt;/li&gt;
  &lt;li&gt;Learning Drupal 6 module development - Matt Bucher&lt;/li&gt;
  &lt;li&gt;Foundations of Ajax - Ryan Asleson and Nathaniel T. Schutta&lt;/li&gt;
  &lt;li&gt;Dhtml Utopia: Modern Web Design using Javascript and Dom - Stuart
Langridge&lt;/li&gt;
  &lt;li&gt;Spinning the Semantic Web - Fensel et al.&lt;/li&gt;
  &lt;li&gt;Python programming on Win 32 - Mark Hammond and Andy Robinson&lt;/li&gt;
  &lt;li&gt;Building Scalable Web Sites - Cal Henderson&lt;/li&gt;
  &lt;li&gt;Restful Web Services - Leonard Richardson and Sam Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Rails books cover a mix of Rails 1 and Rails 2. So they are
probably not much use to anyone at this stage. They might be useful
for skim reading to get an overview of how to do stuff in rails before
moving onto learning Rails 3 in detail.&lt;/p&gt;

&lt;p&gt;The Drupal books cover
Drupal 6. Although the current version of Drupal is 7, v.6 is still a
valid deployment option, and you’ll learn enough about the internals
of drupal from these books to ease your way into v.7 if you choose to.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jul 2011 00:00:00 +0100</pubDate>
        <link>http://www.aidanf.net/posts/book-clearance</link>
        <guid isPermaLink="true">http://www.aidanf.net/posts/book-clearance</guid>
        
        
      </item>
    
  </channel>
</rss>
